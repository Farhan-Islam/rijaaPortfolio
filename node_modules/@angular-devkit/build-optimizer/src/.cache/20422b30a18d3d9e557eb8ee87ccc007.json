{"remainingRequest":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\ng-scrollreveal\\services\\ngs-reveal.service.js","dependencies":[{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\ng-scrollreveal\\services\\ngs-reveal.service.js","mtime":1521916218891},{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1521662860097},{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1521662864793}],"contextDependencies":[],"result":["import { Injectable } from '@angular/core';\nimport { NgsRevealConfig } from './ngs-reveal-config';\nimport { WindowService } from './window.service';\n/**\n * Service to inject in directives to use ScrollReveal JS.\n * It delegates the work to SR, when DOM manipulation is possible (i.e app is not running in a web worker for e.g).\n * If not possible, most methods simply do nothing, as DOM elements are not available anyway.\n */\nexport var NgsRevealService = /*@__PURE__*/ (function () {\n    function NgsRevealService(config, windowService) {\n        this.config = config;\n        this.windowService = windowService;\n        this.window = windowService.nativeWindow;\n        if (this.window) {\n            // init the scrollReveal library with injected config\n            var srConfig = Object.assign({}, config || {});\n            this.sr = ScrollReveal(srConfig);\n        }\n    }\n    /**\n     * Method to reveal a single DOM element.\n     * @param elementRef  a reference to the element to reveal\n     * @param config      (optional) custom configuration to use when revealing this element\n     */\n    NgsRevealService.prototype.reveal = function (elementRef, config) {\n        if (!this.window) {\n            return null;\n        }\n        return elementRef.nativeElement ?\n            this.sr.reveal(elementRef.nativeElement, config) : this.sr;\n    };\n    /**\n     * Method to reveal a set of DOM elements.\n     * @param parentElementRef  the parent DOM element encaspulating the child elements to reveal\n     * @param selector          a list of CSS selectors (comma-separated) that identifies child elements to reveal\n     * @param interval          (optional) interval in milliseconds, to animate child elemnts sequentially\n     * @param config            (optional) custom configuration to use when revealing this set of elements\n     */\n    NgsRevealService.prototype.revealSet = function (parentElementRef, selector, interval, config) {\n        if (!this.window) {\n            return null;\n        }\n        return parentElementRef.nativeElement ?\n            this.sr.reveal(selector, config, interval) : this.sr;\n    };\n    /**\n     * Method to synchronize and consider newly added child elements (for e.g when child elements were added asynchronously to parent DOM) .\n     */\n    NgsRevealService.prototype.sync = function () {\n        if (this.window) {\n            this.sr.sync();\n        }\n    };\n    /** @nocollapse */\n    NgsRevealService.ctorParameters = [\n        { type: NgsRevealConfig, },\n        { type: WindowService, },\n    ];\n    return NgsRevealService;\n}());\n//# sourceMappingURL=ngs-reveal.service.js.map \n",null]}