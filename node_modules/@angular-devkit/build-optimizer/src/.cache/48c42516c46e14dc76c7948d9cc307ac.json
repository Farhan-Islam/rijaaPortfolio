{"remainingRequest":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\ng-scrollreveal\\directives\\ngs-reveal-set.directive.js","dependencies":[{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\ng-scrollreveal\\directives\\ngs-reveal-set.directive.js","mtime":1521916218819},{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1521662860097},{"path":"C:\\Users\\Taucef\\Portfolio\\Rijaa-Portfolio Site\\rijaaPortfolio\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1521662864793}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { Directive, ElementRef, Input } from '@angular/core';\nimport { NgsRevealService } from '../services/ngs-reveal.service';\nimport { AbstractNgsRevealDirective } from './ngs-reveal-common.directive';\n/**\n * Directive to add 'ScrollReveal' functionality to a <b>set of DOM elements</b> (identify via the `[ngsSelector]` attribute) in the page.\n * This directive is meant to be placed on the <b>parent node</b> that contains the child elements to reveal.\n * You can optionally add the `[ngsInterval]` attribute to reveal items sequentially, following the given interval(in milliseconds).\n * You can optionally add the `[ngsSync]` attribute to reveal new child elements that may have been added in the parent node asynchronously.\n *\n */\nexport var NgsRevealSetDirective = /*@__PURE__*/ (function (_super) {\n    __extends(NgsRevealSetDirective, _super);\n    function NgsRevealSetDirective(elementRef, ngsRevealService) {\n        _super.call(this, ngsRevealService);\n        this.elementRef = elementRef;\n    }\n    Object.defineProperty(NgsRevealSetDirective.prototype, \"_config\", {\n        /**\n         * Custom configuration to use when revealing this set of elements\n         */\n        set: function (value) {\n            this._initConfig(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    NgsRevealSetDirective.prototype.ngOnInit = function () {\n        if (!this.ngsSelector && console) {\n            var item = this.elementRef.nativeElement ? this.elementRef.nativeElement.className : '';\n            console.error(\"[ng-scrollreveal] You must set \\\"[ngsSelector]\\\" attribute on item '\" + item + \"' when using \\\"ngsRevealSet\\\"\");\n            return;\n        }\n        this.ngsRevealService.revealSet(this.elementRef, this.ngsSelector, this.ngsInterval, this.config);\n    };\n    NgsRevealSetDirective.prototype.ngOnChanges = function (changes) {\n        var ngsSyncProp = 'ngsSync';\n        if (ngsSyncProp in changes\n            && !changes[ngsSyncProp].isFirstChange()\n            && !changes[ngsSyncProp].currentValue()) {\n            this.ngsRevealService.sync();\n        }\n    };\n    /** @nocollapse */\n    NgsRevealSetDirective.ctorParameters = [\n        { type: ElementRef, },\n        { type: NgsRevealService, },\n    ];\n    return NgsRevealSetDirective;\n}(AbstractNgsRevealDirective));\n//# sourceMappingURL=ngs-reveal-set.directive.js.map \n",null]}